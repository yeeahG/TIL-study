docker volume ls
docker volume prune
( 볼륨 다 지움 )
docker volume create --name encore
( 다 안지워졌네 )
docker ps -a
docker rm $(docker ps -a -q)
docker volume rm myvol
docker volume prune
docker volume ls
( 다 지워졌다 )

# 볼륨 생성 
docker volume create --name encore

docker run -it --name test1 -v encore:/root/ ubuntu:14.04

# 컨테이너 안에서 
cd /root/ && echo "hi" > hi
ll ( hi 확인 )
exit

docker inspect --type volume encore
/var/lib/docker/volumes/encore/_data <- 여기에 저장 
( sudo 권한 없어서 못들어감 강사님만 해보심 )

docker run -it --name test2 --volumes-from test1 ubuntu:14.04
(test1은 root, 지금 test2는 test1이랑 공유함)
cd /root
ll ( hi 있음 )
exit
docker ps -a

# nginx 최신 버전 pull
docker pull nginx  ( 태그 적지 않으면 항상 최신버전 )

docker pull nginx:stable ( 안정화 버전 )

# 도커 이미지 생성 과정 
docker history nginx:stable

docker images

mkdir html

# nginx 컨테이너 생성 
docker run -d -p 8888:80 -v /home/ec2-user/html/:/usr/share/nginx/html --name nginx-bind nginx

# 공유 폴더에 있는 파일을 아래 폴더에 복사 
/home/ec2-user/html

# html 폴더에 이동 
cd ~/html && mv ./index-BindMount.html ./index.html

# volume 생성 
docker volume create nginx-vol

# 이전 컨테이너 정지 
docker stop nginx-bind
# 컨테이너 생성
docker run -d -v nginx-vol:/usr/share/nginx/html -p 8888:80 --name nginx-vol nginx

# 볼륨의 저장소에 있는 파일 보기 
sudo ls -al /var/lib/docker/volumes/nginx-vol/_data

ec2-user@scw html]$ sudo ls -al /var/lib/docker/volumes/nginx-vol/_data
total 8
drwxr-xr-x. 2 root root  40 May 18 01:13 .
drwx-----x. 3 root root  19 May 18 01:12 ..
-rw-r--r--. 1 root root 497 Jan 25 15:03 50x.html
-rw-r--r--. 1 root root 615 Jan 25 15:03 index.html

# Q : 위 2개의 파일 정체는? 
# A : 

cd ~/html && sudo cp ./index-Volume.html /var/lib/docker/volumes/nginx-vol/_data/index.html

# Dockerfile 실습 

cd ~ && mkdir dockerfile && cd dockerfile

vi Dockerfile

FROM ubuntu:14.04
RUN apt-get update
RUN apt-get install apache2 -y
ADD test.html /var/www/html
WORKDIR /var/www/html
RUN ["/bin/bash", "-c", "echo hello >> test2.html"]
EXPOSE 80 ( 80번 포트 열어줘 )
CMD apachectl -DFOREGROUND ( 코드로 바로 인식해? )

###### 나와서
echo "test" >> test.html

docker build -t mybuild:0.1 .

docker run -d -P --name myserver mybuild:0.1
b70a80ac9998282d53b5b73274926d53a499c814cdd29f0413d7695361baca77

docker images

# 컨테이너는 변경 불가능한 인프라....
# 초기에 인프라가 구성되면 임의로 디렉토리 연결이나 
# 포트추가 같은 행동 못함 다시 만들어야함

docker stop myserver 
docker run -d -p 80:80 --name myserver mybuild:0.1
( already 나옴 )
docker stop myserver && docker rm myserver 
( 멈추고 지우고 )
docker run -d -p 80:80 --name myserver mybuild:0.1
( 다시 실행 )
docker stop nginx-vol && docker rm nginx-vol

Q: 이미지 빌드 할때 . 만 적으면 거기서 알아서 Dockerfile을 찾아서 빌드 해주는건가요?
A : .은 현재 폴더에 Dockerfile 있다는 것을 알려줌 
    만약 현재 상대경로 test에 Dockerfile 있을 경우 
    docker build -t mybuild:0.1 ./test

# 도커 이미지 추출(백업)
docker save -o myserver.tar mybuild:0.1

# 소유권 설정 
sudo chown ec2-user:ec2-user ./myserver.tar

docker image rm mybuild:0.1
( 못지움 )

# 도커 이미지 강제 삭제 
docker image rmi -f mybuild:0.1
( 강제로 삭제해서 <none> 된 이미지 -> 댕글링 이미지 )

docker image prune ( 삭제가 안됨 )

docker stop myserver && docker rm myserver
docker image prune
docker images

# 이미지 삭제할때 컨테이너가 실행중이면 삭제 X
docker stop myserver && docker rm myserver
# 댕글링 이미지 삭제
docker image prune

# 이미지 로드
docker load -i myserver.tar

강사님 1폴더 다운로드해서 ec2-user에 업로드

# openjdk 설치
sudo yum install java-1.8.0-openjdk-devel -y

chmod 700 mvnw

# 빌드 진행시 디렉토리 clean 이후 jar 생성
./mvnw clean package
ll ( target 생김 )

docker build -t basic-img .
docker images ( basic-img 만들어져있음 )

docker build -t basic-img:1.0 -t basic-img:2.0 .
( 한번 만든 내용 캐시가 있어서 금방 만들어짐 )

docker images basic-img ( basic-img만 보기 )
vi Dockerfile

Appliction -> 쓰고싶은 것을...

# 다시 빌드 
docker build -t basic-img:3.0 .

docker run -d -p 4000:80 --name basic-run basic-img

curl 127.0.0.1:4000

-----------------------------오후-----------------------------
# 라이트 세일 
 - 웹 사이트 및 블로그 바로 생성 
 - 단순 앱 
 - 개발 및 테스트 환경 
 - 소수의 서버로 구성된 비즈니스 소프트웨어 
 - 비용이 저렴

# CLI (Command Line Interface)
# ssh 콘솔 
cat bitnami_credentials

# wordpress admin 접속 
http://3.34.182.230/wp-admin/ 로그인

Lightsail에서 connect using SSH에 cat bitnami_credentials 입력
하면 아이디와 비밀번호 알려줌.
설정에서 한국어


# pem -> ppk 로 변경하기 
1. puttygen 실행 
2. Load 버튼 클릭 
3. 내가 변경할 pem 파일 선택(파일 선택을 All files로 변경해야 pem 보임 )
  - 정상적으로 import가 되면
  ---------------------------
  PuTTYgen Notice
  ---------------------------
  Successfully imported foreign key
  (OpenSSH SSH-2 private key (old PEM format)).
  To use this key with PuTTY, you need to
  use the "Save private key" command to
  save it in PuTTY's own format.
  ---------------------------
  확인   
  --------------------------- 창이 뜸
4. Save Private Key
  - ppk 형태로 저장


Putty 켜서 lightsail ip쓰고 22포트에 PK등록하고 접속
login as : bitnami 입력


IAM 에서 사용자 만들고 권한 부여해보기. 도 해봤다.