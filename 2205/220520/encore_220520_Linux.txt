puttygen 에서 사용하는 ppk import
export 누르고 pem으로 저장

filezilla에서 ec2-user에 넣기

# 파일 업로드 확인 
# mac이나 리눅스에서 ssh 접속할때.. 
chmod 600 [본인.pem]

# ssh 접속 테스트 
ssh -i 본인.pem ec2-user@127.0.0.1
ssh -i 본인.pem ec2-user@ 인스턴스퍼블릭ip
ssh -i awseh.pem ec2-user@172.0.0.1

# 접속한다음에 w (접속 세션)
w

exit으로 나가기

# 인스턴스 종료
sudo shutdown -h now

------------------------------------------
aws에서 이미지생성
vpc생성     IP/ 172.31.30.0
서브넷생성 IP/ 172.31.30.0
#

인스턴스생성 , 이름정하고 
내 AMI 눌러서 내꺼 이미지 선택
인스턴스유형 t2.medium
키페어 - 내꺼
네트워크설정 편집 
- vpc, subnet내꺼 선택, 퍼블릭IP 활성화, 기존보안그룹선택(생성해도됨)
인스턴스개수 3
시작
#

--- 가용영역 에러남

서브넷 네트워크 경계 그룹이 ap-northeast-2
서브넷 다시 생성해서 ap-northeast-c로 생성
다시 인스턴스 시작해서 생성
#
vpc -> 인터넷 게이트웨이
인터넷 게이트웨이 생성 ( 인식가능한이름으로생성 - 이거만하면됨 )
vpc에 연결
#
라우팅테이블
오늘만든 vpc 있는 라우팅 선택해서 편집
라우팅 추가 0.0.0.0/0, 인터넷게이트웨이(누르면 오늘만든거 나오는거 클릭)
저장
#
이제 putty로 접속 됨

보안그룹 추가 
1. 모든 ICMP - IPv4, 내secu선택
2. TCP, 내secu선택

------------------------------------------
적어놓은 프라이빗ip에 putty에서 ping 보내보기 (4개 다 정상)

sudo yum install vim

# hosts 파일 수정 
sudo vim /etc/hosts

정리했던 ip, hosts 이름 붙여넣고 저장

ping w3-k82 해보기

# hostname 변경하기 
sudo hostnamectl set-hostname [해당 IP에 해당하는...]
hostname ( 확인 )

sudo hostnamectl set-hostname w1-k8s
sudo hostnamectl set-hostname w2-k8s
sudo hostnamectl set-hostname w3-k8s
# 다른 인스턴스로 이동 
ssh -i encore_scw.pem ec2-user@m-k8s

ssh -i awseh.pem ec2-user@m-k8s
ssh -i awseh.pem ec2-user@w1-k8s
ssh -i awseh.pem ec2-user@w2-k8s
ssh -i awseh.pem ec2-user@w3-k8s

이동해서 다 hostname 맞게 설정해주고 exit해서 m으로 오고
딴데가서 또 hostname 바꿔주고 반복

####
sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum install -y docker-ce
###
sudo systemctl enable --now docker
sudo systemctl status docker

vim master_start.sh 
내용 넣기
##########################
systemctl enable --now kubelet
 
containerd config default > config.toml
cp ./config.toml /etc/containerd/config.toml
systemctl restart containerd

kubeadm init --token 123456.1234567890123456 --token-ttl 0 \
--pod-network-cidr=172.31.30.0/24 --apiserver-advertise-address=[마스터 ip ]

# config for master node only 
mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

##########################
sudo ./master_start.sh

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

sudo ./master_start.sh

sudo systemctl status kubelet

### 쿠버네티스 컨테이너 간의 통신을 위한 설치 
sudo yum install wget 
vim calico.yaml
:/192 <- 명령어로 찾기
192로 시작하는 value를
172.31.30.0/24로 변경
cd ~ && wget https://docs.projectcalico.org/v3.8/manifests/calico.yaml
kubectl apply -f https://docs.projectcalico.org/v3.8/manifests/calico.yaml

kubectl apply -f calico.yaml <- 적용

ssh -i awseh.pem ec2-user@w1-k8s
ssh -i awseh.pem ec2-user@w2-k8s
ssh -i awseh.pem ec2-user@w3-k8s
w1,2,3에 도커 설치

vim docker_install.sh
######
sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum install -y docker-ce
sudo systemctl enable --now docker
######
. docker_install.sh
sudo systemctl status docker 로 상태 확인

vim work_install.sh

systemctl enable --now kubelet

containerd config default > config.toml
cp ./config.toml /etc/containerd/config.toml
systemctl restart containerd ( 비밀번호 치라함 )
 
# 여러분의 마스터 ip 
kubeadm join --token 123456.1234567890123456 --discovery-token-unsafe-skip-ca-verification 172.31.30.175:6443

chmod +x work_install.sh
sudo ./work_install.sh

# w1 ~ w3 설정 끝나고 마스터로 돌아오신다음에 
kubectl get nodes